<!DOCTYPE html>
<html lang="en">
<head>
   <meta charset="utf-8" />
   <title>Desktops and Tablets</title>
 
   <script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js"></script>
 
   <script type="text/javascript">
	
	var image_list=["Images/image1.png","Images/image2.png","Images/image3.png","Images/image4.png","Images/image5.png","Images/image6.png","Images/image7.png","Images/image8.png","Images/image9.png","Images/image10.png","Images/image11.png","Images/image12.png","Images/image13.png","Images/image14.png","Images/image15.png","Images/image16.png","Images/image17.png","Images/image18.png","Images/image19.png","Images/image20.png"];
	var answer_list=["Bat","Bear","Butterfly","Cat","Duck","Fish","Hippo","Lion","Shark","Snail","Cow","Frog","Fox","Mouse","Owl","Rabbit","Snake","Squirrel","Swan","Whale"];
	var i=0;
	function random_list (i) {
		var random1=0; var random2=0; var random3=0;
		while (random1===random2||random1===random3||random2===random3) {
			random1=Math.floor(Math.random()*image_list.length);
			random2=Math.floor(Math.random()*image_list.length);
			random3=Math.floor(Math.random()*image_list.length);
		}
		if (random1!==i && random2!==i && random3!==i) {
			random1=i;
		}
		return [random1,random2,random3];
	}

      $(document).ready(function () {
         initialize();
      });


      function Draw(src) {
	 var sigCanvas = document.getElementById("canvasSignature");
         var context = sigCanvas.getContext("2d");
	 var ImageObj= document.createElement("img");
	 ImageObj.onload = function() {
              fitImageOn(sigCanvas, ImageObj);
	  };

	function fitImageOn(canvas, imageObj) {
	      context.clearRect(0, 0, canvas.width, canvas.height);

	      var imageDimensionRatio = imageObj.width / imageObj.height;
	      var canvasDimensionRatio = canvas.width / canvas.height;
	      var renderableHeight, renderableWidth, xStart, yStart;
	      if(imageDimensionRatio < canvasDimensionRatio) {
		  renderableHeight = canvas.height;
		  renderableWidth = imageObj.width * (renderableHeight / imageObj.height);
		  xStart = (canvas.width - renderableWidth) / 2;
		  yStart = 0;
	      } else if(imageDimensionRatio > canvasDimensionRatio) {
		  renderableWidth = canvas.width;
		  renderableHeight = imageObj.height * (renderableWidth / imageObj.width);
		  xStart = 0;
		  yStart = (canvas.height - renderableHeight) / 2;
	      } else {
		  renderableHeight = canvas.height;
		  renderableWidth = canvas.width;
		  xStart = 0;
		  yStart = 0;
	      }
	      context.drawImage(imageObj, xStart, yStart, renderableWidth, renderableHeight);
	  };
	 ImageObj.src=src;
         context.strokeStyle = 'Black';
 
         // This will be defined on a TOUCH device such as iPad or Android, etc.
         var is_touch_device = 'ontouchstart' in document.documentElement;
 
         if (is_touch_device) {
            // create a drawer which tracks touch movements
            var drawer = {
               isDrawing: false,
               touchstart: function (coors) {
                  context.beginPath();
                  context.moveTo(coors.x, coors.y);
                  this.isDrawing = true;
               },
               touchmove: function (coors) {
                  if (this.isDrawing) {
                     context.lineTo(coors.x, coors.y);
                     context.stroke();
                  }
               },
               touchend: function (coors) {
                  if (this.isDrawing) {
                     this.touchmove(coors);
                     this.isDrawing = false;
                  }
               }
            };
 
            // create a function to pass touch events and coordinates to drawer
            function draw(event) {
 
               // get the touch coordinates.  Using the first touch in case of multi-touch
               var coors = {
                  x: event.targetTouches[0].pageX,
                  y: event.targetTouches[0].pageY
               };
 
               // Now we need to get the offset of the canvas location
               var obj = sigCanvas;
 
               if (obj.offsetParent) {
                  // Every time we find a new object, we add its offsetLeft and offsetTop to curleft and curtop.
                  do {
                     coors.x -= obj.offsetLeft;
                     coors.y -= obj.offsetTop;
                  }
				  // The while loop can be "while (obj = obj.offsetParent)" only, which does return null
				  // when null is passed back, but that creates a warning in some editors (i.e. VS2010).
                  while ((obj = obj.offsetParent) != null);
               }
 
               // pass the coordinates to the appropriate handler
               drawer[event.type](coors);
            }
 

            // attach the touchstart, touchmove, touchend event listeners.
            sigCanvas.addEventListener('touchstart', draw, false);
            sigCanvas.addEventListener('touchmove', draw, false);
            sigCanvas.addEventListener('touchend', draw, false);
 
            // prevent elastic scrolling
            sigCanvas.addEventListener('touchmove', function (event) {
               event.preventDefault();
            }, false); 
         }
         else {
 
            // start drawing when the mousedown event fires, and attach handlers to
            // draw a line to wherever the mouse moves to
            $("#canvasSignature").mousedown(function (mouseEvent) {
               var position = getPosition(mouseEvent, sigCanvas);
 
               context.moveTo(position.X, position.Y);
               context.beginPath();
 
               // attach event handlers
               $(this).mousemove(function (mouseEvent) {
                  drawLine(mouseEvent, sigCanvas, context);
               }).mouseup(function (mouseEvent) {
                  finishDrawing(mouseEvent, sigCanvas, context);
               }).mouseout(function (mouseEvent) {
                  finishDrawing(mouseEvent, sigCanvas, context);
               });
            });
 
         }
	}
	 

      // works out the X, Y position of the click inside the canvas from the X, Y position on the page
      function getPosition(mouseEvent, sigCanvas) {
         var x, y;
         if (mouseEvent.pageX != undefined && mouseEvent.pageY != undefined) {
            x = mouseEvent.pageX;
            y = mouseEvent.pageY;
         } else {
            x = mouseEvent.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;
            y = mouseEvent.clientY + document.body.scrollTop + document.documentElement.scrollTop;
         }
 
         return { X: x - sigCanvas.offsetLeft, Y: y - sigCanvas.offsetTop };
      }
 
      function initialize() {
         // get references to the canvas element as well as the 2D drawing context
         Draw(image_list[i]);
	 var random = random_list(i);
	 var answers=document.getElementsByName("answer");
	 answers[0].value=answer_list[random[0]];
	 answers[1].value=answer_list[random[1]];
	 answers[2].value=answer_list[random[2]];
	 answers[0].checked=false;
	 answers[1].checked=false;
	 answers[2].checked=false;
	 document.getElementById("answer1").innerHTML=answer_list[random[0]];
	 document.getElementById("answer2").innerHTML=answer_list[random[1]];
	 document.getElementById("answer3").innerHTML=answer_list[random[2]];
      }
 
      // draws a line to the x and y coordinates of the mouse event inside
      // the specified element using the specified context
      function drawLine(mouseEvent, sigCanvas, context) {
	var position = getPosition(mouseEvent, sigCanvas);
 
         context.lineTo(position.X, position.Y);
         context.stroke();
      }
 
      // draws a line from the last coordiantes in the path to the finishing
      // coordinates and unbind any event handlers which need to be preceded
      // by the mouse down event
      function finishDrawing(mouseEvent, sigCanvas, context) {
 	 
         context.closePath();
 
         // unbind any events which could draw
         $(sigCanvas).unbind("mousemove")
                     .unbind("mouseup")
                     .unbind("mouseout");
      }

      function equal() {
	   var answers=document.getElementsByName('answer');
	   var answer="";
	   for (var j=0; j<answers.length; j++) {
		if (answers[j].checked) {
			answer=answers[j].value;
			break;
		}
	   }
	   if (answer!=="") {answer=answer.substring(0,1).toUpperCase()+answer.substring(1,answer.length).toLowerCase(); }
	   var image=answer_list[i];
	   if (answer==="") {
		alert("Please select something"); }
	   else if (answer===image) {
		window.open('Corr-Incorr/correct.htm');
		i++;
		if (i>=image_list.length) {
			window.open('Corr-Incorr/congratulations.htm');
		}
		else {
		initialize(); }
		 }
	   else {
		window.open('Corr-Incorr/incorrect.htm'); } 
      }

   </script>
   
</head>
 
<body align="center" background="http://www.morfinmagic.com/html/images/Blue%20Star%20Background.jpg">
   <font color="white">Select the correct choice among a list of three</font>
   <div id="canvasDiv">
      <!-- It's bad practice (to me) to put your CSS here.  I'd recommend the use of a CSS file! -->
      <canvas id="canvasSignature" width="600px" height="600px" style="border:2px solid #000000;"></canvas>
   </div>
   <form>
	<div id="answer-value">
   		<input type="radio" name="answer" value="">
   		<font color="white" id="answer1"></font>
   		<input type="radio" name="answer" value="">
   		<font color="white" id="answer2"></font>
   		<input type="radio" name="answer" value="">
   		<font color="white" id="answer3"></font>
	</div>
   </form>
   <button onclick="equal()">Submit</button>
   <button onclick="initialize()">Clear</button>
</body>
</html>